{"title":"快速排序算法","date":"2018-06-25T03:14:28.091Z","excerpt":"","slug":"快速排序算法","updated":"2018-07-06T00:24:26.127Z","content":"<p>摘录于百度百科.</p>\n<h2 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h2><p>​    通过一趟排序将要排序的数据分割成独立的两部分 , 其中一部分的所有数据都比另外一部分的所有数据要小 , 然后在按此方法对这两部分数据分别进行快速排序 , 整个排序过程可以递归进行 , 以此达到整个数据变成有序序列.</p>\n<p><strong>注意:快速排序不是一种稳定的排序算法,多个相同的值的相对位置也许会在算法结束时产生变动.</strong></p>\n<h2 id=\"算法介绍\"><a href=\"#算法介绍\" class=\"headerlink\" title=\"算法介绍\"></a>算法介绍</h2><p>设要排序的数组是arr[0]…arr[n-1] , 首先任意选取一个数据(通常选用数组的第一个数arr[0])作为关键数据key , 然后将所有比它小的数都放在它前面 , 所有比它大的数都放在它的后面 , 这个过程称为一趟快速排序.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class　Quick</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　public　void　sort(int　arr[],int　low,int　high)&#123;</span><br><span class=\"line\">     int　l=low;</span><br><span class=\"line\">     int　h=high;</span><br><span class=\"line\">     int　povit=arr[low];</span><br><span class=\"line\"></span><br><span class=\"line\">     while(l&lt;h)&#123;</span><br><span class=\"line\">         while(l&lt;h&amp;&amp;arr[h]&gt;=povit)</span><br><span class=\"line\">         h--;</span><br><span class=\"line\">         if(l&lt;h)&#123;</span><br><span class=\"line\">         int　temp=arr[h];</span><br><span class=\"line\">         arr[h]=arr[l];</span><br><span class=\"line\">         arr[l]=temp;</span><br><span class=\"line\">         l++;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     while(l&lt;h&amp;&amp;arr[l]&lt;=povit)</span><br><span class=\"line\">         l++;</span><br><span class=\"line\"></span><br><span class=\"line\">         if(l&lt;h)&#123;</span><br><span class=\"line\">         int　temp=arr[h];</span><br><span class=\"line\">         arr[h]=arr[l];</span><br><span class=\"line\">         arr[l]=temp;</span><br><span class=\"line\">         h--;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     print(arr);</span><br><span class=\"line\">     System.out.print(&quot;l=&quot;+l+1)+&quot;h=&quot;+h+1)+&quot;povit=&quot;+povit+&quot;\\n&quot;);</span><br><span class=\"line\">     if(l&gt;low)sort(arr,low,l-1);</span><br><span class=\"line\">     if(h&lt;high)sort(arr,l+1,high);</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"随笔二","slug":"随笔二"},"next":{"title":"随笔一","slug":"随笔一"},"link":"/2018/06/25","toc":[{"title":"基本思想","id":"基本思想","index":"1"},{"title":"算法介绍","id":"算法介绍","index":"2"}]}