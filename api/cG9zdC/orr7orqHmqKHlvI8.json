{"title":"常见的设计模式","date":"2018-06-20T14:19:28.472Z","excerpt":"","slug":"设计模式","updated":"2018-06-20T14:19:23.763Z","content":"<h2 id=\"1-单例模式\"><a href=\"#1-单例模式\" class=\"headerlink\" title=\"1.单例模式\"></a>1.单例模式</h2><p>实现方式:</p>\n<blockquote>\n</blockquote>\n<p>1.在本类内部创建一个私有的静态的本类实例为成员对象</p>\n<blockquote>\n</blockquote>\n<p>2.提供公共的静态访问方法</p>\n<p>应用场景:</p>\n<blockquote>\n<p>（1）资源共享的情况下，避免由于资源操作时导致的性能的损耗等。如数据库连接池的设计,日志文件，应用配置。</p>\n</blockquote>\n<p>（2）控制资源的情况下，方便资源之间的互相通信。如线程池等。</p>\n<h2 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2.工厂模式\"></a>2.工厂模式</h2><p>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。</p>\n<p>实现方式:</p>\n<blockquote>\n</blockquote>\n<p>1、工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑。在java中它往往由一个具体类实现。</p>\n<blockquote>\n</blockquote>\n<p>2、抽象产品角色：它一般是具体产品继承的父类或者实现的接口。在java中由接口或者抽象类来实现。</p>\n<blockquote>\n</blockquote>\n<p>3、具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现。</p>\n<p>应用场景:</p>\n<blockquote>\n</blockquote>\n<p>1)当客户程序不需要知道对象的创建过程。</p>\n<blockquote>\n</blockquote>\n<p>2)客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象。</p>\n<h2 id=\"3-代理模式\"><a href=\"#3-代理模式\" class=\"headerlink\" title=\"3.代理模式\"></a>3.代理模式</h2><p>代理模式的关键点是:代理对象与目标对象,代理对象是对目标对象的扩展,并会调用目标对象 </p>\n<h3 id=\"1-组成\"><a href=\"#1-组成\" class=\"headerlink\" title=\"1.组成\"></a>1.组成</h3><pre><code>抽象角色:通过接口或抽象类声明真实角色实现的业务方法。\n\n代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。\n\n真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。\n</code></pre><h3 id=\"2-优点\"><a href=\"#2-优点\" class=\"headerlink\" title=\"2.优点\"></a>2.优点</h3><pre><code>(1).职责清晰:真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件完成事务，附带的结果就是编程简洁清晰。\n\n(2).代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了中介的作用和保护了目标对象的作用。\n\n(3).高扩展性\n</code></pre><h3 id=\"3-模式结构\"><a href=\"#3-模式结构\" class=\"headerlink\" title=\"3.模式结构\"></a>3.模式结构</h3><h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><pre><code>是由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。\n</code></pre><h4 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h4><pre><code>是在实现阶段不用关心代理类，而在运行阶段才指定哪一个对象.\n</code></pre><p>应用场景:</p>\n<blockquote>\n</blockquote>\n<p>（1）当我们想要隐藏某个类时，可以为其提供代理类</p>\n<blockquote>\n</blockquote>\n<p>（2）当一个类需要对不同的调用者提供不同的调用权限时，可以使用代理类来实现（代理类不一定只有一个，我们可以建立多个代理类来实现，也可以在一个代理类中进行权限判断来进行不同权限的功能调用）</p>\n<blockquote>\n</blockquote>\n<p>（3）当我们要扩展某个类的某个功能时，可以使用代理模式，在代理类中进行简单扩展</p>\n<h2 id=\"4-装饰者模式\"><a href=\"#4-装饰者模式\" class=\"headerlink\" title=\"4.装饰者模式\"></a>4.装饰者模式</h2><p>使用条件：</p>\n<blockquote>\n</blockquote>\n<p>1.增强的类和被增强的类实现相同的接口</p>\n<blockquote>\n</blockquote>\n<p>2.在增强的类中获得被增强的类的引用</p>\n","prev":{"title":"随笔一","slug":"随笔一"},"next":{"title":"jvm知识点小结之一","slug":"jvm知识"},"link":"/2018/06/20","toc":[{"title":"1.单例模式","id":"1-单例模式","index":"1"},{"title":"2.工厂模式","id":"2-工厂模式","index":"2"},{"title":"3.代理模式","id":"3-代理模式","index":"3","children":[{"title":"1.组成","id":"1-组成","index":"3.1"},{"title":"2.优点","id":"2-优点","index":"3.2"},{"title":"3.模式结构","id":"3-模式结构","index":"3.3","children":[{"title":"静态代理","id":"静态代理","index":"3.3.1"},{"title":"动态代理","id":"动态代理","index":"3.3.2"}]}]},{"title":"4.装饰者模式","id":"4-装饰者模式","index":"4"}]}